services:
#  mysqldb:
#    image: mysql:8.0
#    restart: always
#    environment:
#      MYSQL_DATABASE: users_database
#      MYSQL_ROOT_PASSWORD: root
#    volumes:
#      - mysql_data:/var/lib/mysql
#      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
#    ports:
#      - 3307:3306
#    healthcheck:
#      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
#      interval: 10s
#      timeout: 5s
#      retries: 3
#      start_period: 40s
#    networks:
#        - app-network
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./init-redis.sh:/init-redis.sh
    command: redis-server --appendonly yes
    networks:
      - app-network

  backend:
    image: 821625964871.dkr.ecr.us-east-1.amazonaws.com/backend:latest
    container_name: backend
    restart: always
    ports:
      - "8080:8080"
    environment:
      MYSQL_HOST: angularspring-db.cixgnehzwu0c.us-east-1.rds.amazonaws.com
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_PORT: 3306
      MYSQL_DATABASE: users_database
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - app-network

  frontend:
    image: 821625964871.dkr.ecr.us-east-1.amazonaws.com/frontend:latest
    container_name: frontend
    ports:
      - "4200:80"
    depends_on:
      - backend
    networks:
        - app-network

volumes:
  redis_data:

networks:
  app-network:
    driver: bridge